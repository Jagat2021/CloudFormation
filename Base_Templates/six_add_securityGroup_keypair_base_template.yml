AWSTemplateFormatVersion: 2010-09-09
Description: Add route table association to the subnets in base template
#Metadata:
#Parameters:
#Mappings:
#Conditions:

### RESOURCE CREATION ###
Resources:
  devVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "192.168.1.0/24"
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      Tags:
        - Key: Environment
          Value: Dev
        - Key: Name
          Value: devVPC
    # ADD 4 dev, uat, prod, DR SUBNETS
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: devVPC
      CidrBlock: 192.168.1.0/26
      MapPublicIpOnLaunch: "true"
      AvailabilityZone: "us-east-1a"
      Tags:
        - Key: Name
          Value: Public_Subnet
  WEBSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: devVPC
      CidrBlock: 192.168.1.64/26
      AvailabilityZone: "us-east-1b"
      Tags:
        - Key: Name
          Value: WebServer_Subnet
  APPSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: devVPC
      CidrBlock: 192.168.1.128/26
      AvailabilityZone: "us-east-1c"
      Tags:
        - Key: Name
          Value: AppServer_Subnet
  DBSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: devVPC
      CidrBlock: 192.168.1.192/26
      AvailabilityZone: "us-east-1d"
      Tags:
        - Key: Name
          Value: dbServer_Subnet
  ## ADD Route Table
  PubRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: devVPC
      Tags:
        - Key: Name
          Value: Public-RT
  WebserverRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: devVPC
      Tags:
        - Key: Name
          Value: Webserver-RT
  AppserverRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: devVPC
      Tags:
        - Key: Name
          Value: Appserver-RT
  DBserverRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: devVPC
      Tags:
        - Key: Name
          Value: DBserver-RT
  # Route Table Association
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PubRouteTable

  WebSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WEBSubnet
      RouteTableId: !Ref WebserverRT

  AppSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref APPSubnet
      RouteTableId: !Ref AppserverRT

  DBSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DBSubnet
      RouteTableId: !Ref DBserverRT
  #Add a Internet GW to devVPC
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyIGW
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref devVPC
      InternetGatewayId: !Ref myInternetGateway
  # Add Security Group
  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for public instances"
      GroupName: "Public-SG"
      VpcId: !Ref devVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: "8"
          ToPort: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Public-SG
  WEBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for WEB Server instances"
      GroupName: "Web-SG"
      VpcId: !Ref devVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: "8"
          ToPort: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Web-SG
  APPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for APP server instances"
      GroupName: "App-SG"
      VpcId: !Ref devVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: "8"
          ToPort: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: App-SG
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for DB server instances"
      GroupName: "Database-SG"
      VpcId: !Ref devVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: "8"
          ToPort: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: DB-SG

  # --------- ADD a Key Pair - !!IMP - Banner -------------
  #In AWS CloudFormation there is no way to generate a private key pair.
  #As a result, you always have manual work. You need to generate a ssh key,
  #import it into AWS and finally pass the name to your CloudFormation template.
  #This is clumsy, manual work which prevents us from fully automating the deployment of our infrastructure.

Outputs:
  BaseStackVPC:
    Description: "VPC id of base stack !!"
    Value: !Ref devVPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCid"
  BaseStackPublicSubnet:
    Description: "Base Stack Public Subnet"
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub "${AWS::StackName}-publicsubnetid"
  BaseStackPublicSG:
    Description: "Base Stack Public Security Group"
    Value: !Ref PublicSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-publicSG"
